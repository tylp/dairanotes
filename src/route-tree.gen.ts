/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from "@tanstack/react-router";

// Import Routes

import { Route as rootRoute } from "./routes/__root";

// Create Virtual Routes

const IndexLazyImport = createFileRoute("/")();
const NotesIndexLazyImport = createFileRoute("/notes/")();
const NotesCreateLazyImport = createFileRoute("/notes/create")();
const NotesIdLazyImport = createFileRoute("/notes/$id")();
const AuthRegisterLazyImport = createFileRoute("/auth/register")();
const AuthLoginLazyImport = createFileRoute("/auth/login")();
const NotesIdEditLazyImport = createFileRoute("/notes//$id/edit")();

// Create/Update Routes

const IndexLazyRoute = IndexLazyImport.update({
  path: "/",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/index.lazy").then((d) => d.Route));

const NotesIndexLazyRoute = NotesIndexLazyImport.update({
  path: "/notes/",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/notes/index.lazy").then((d) => d.Route));

const NotesCreateLazyRoute = NotesCreateLazyImport.update({
  path: "/notes/create",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/notes/create.lazy").then((d) => d.Route));

const NotesIdLazyRoute = NotesIdLazyImport.update({
  path: "/notes/$id",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/notes/$id.lazy").then((d) => d.Route));

const AuthRegisterLazyRoute = AuthRegisterLazyImport.update({
  path: "/auth/register",
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import("./routes/auth/register.lazy").then((d) => d.Route),
);

const AuthLoginLazyRoute = AuthLoginLazyImport.update({
  path: "/auth/login",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/auth/login.lazy").then((d) => d.Route));

const NotesIdEditLazyRoute = NotesIdEditLazyImport.update({
  path: "/notes/$id/edit",
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import("./routes/notes/_.$id.edit.lazy").then((d) => d.Route),
);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/auth/login": {
      id: "/auth/login";
      path: "/auth/login";
      fullPath: "/auth/login";
      preLoaderRoute: typeof AuthLoginLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/auth/register": {
      id: "/auth/register";
      path: "/auth/register";
      fullPath: "/auth/register";
      preLoaderRoute: typeof AuthRegisterLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/notes/$id": {
      id: "/notes/$id";
      path: "/notes/$id";
      fullPath: "/notes/$id";
      preLoaderRoute: typeof NotesIdLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/notes/create": {
      id: "/notes/create";
      path: "/notes/create";
      fullPath: "/notes/create";
      preLoaderRoute: typeof NotesCreateLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/notes/": {
      id: "/notes/";
      path: "/notes";
      fullPath: "/notes";
      preLoaderRoute: typeof NotesIndexLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/notes//$id/edit": {
      id: "/notes//$id/edit";
      path: "/notes/$id/edit";
      fullPath: "/notes/$id/edit";
      preLoaderRoute: typeof NotesIdEditLazyImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  "/": typeof IndexLazyRoute;
  "/auth/login": typeof AuthLoginLazyRoute;
  "/auth/register": typeof AuthRegisterLazyRoute;
  "/notes/$id": typeof NotesIdLazyRoute;
  "/notes/create": typeof NotesCreateLazyRoute;
  "/notes": typeof NotesIndexLazyRoute;
  "/notes/$id/edit": typeof NotesIdEditLazyRoute;
}

export interface FileRoutesByTo {
  "/": typeof IndexLazyRoute;
  "/auth/login": typeof AuthLoginLazyRoute;
  "/auth/register": typeof AuthRegisterLazyRoute;
  "/notes/$id": typeof NotesIdLazyRoute;
  "/notes/create": typeof NotesCreateLazyRoute;
  "/notes": typeof NotesIndexLazyRoute;
  "/notes/$id/edit": typeof NotesIdEditLazyRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/": typeof IndexLazyRoute;
  "/auth/login": typeof AuthLoginLazyRoute;
  "/auth/register": typeof AuthRegisterLazyRoute;
  "/notes/$id": typeof NotesIdLazyRoute;
  "/notes/create": typeof NotesCreateLazyRoute;
  "/notes/": typeof NotesIndexLazyRoute;
  "/notes//$id/edit": typeof NotesIdEditLazyRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/"
    | "/auth/login"
    | "/auth/register"
    | "/notes/$id"
    | "/notes/create"
    | "/notes"
    | "/notes/$id/edit";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/"
    | "/auth/login"
    | "/auth/register"
    | "/notes/$id"
    | "/notes/create"
    | "/notes"
    | "/notes/$id/edit";
  id:
    | "__root__"
    | "/"
    | "/auth/login"
    | "/auth/register"
    | "/notes/$id"
    | "/notes/create"
    | "/notes/"
    | "/notes//$id/edit";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute;
  AuthLoginLazyRoute: typeof AuthLoginLazyRoute;
  AuthRegisterLazyRoute: typeof AuthRegisterLazyRoute;
  NotesIdLazyRoute: typeof NotesIdLazyRoute;
  NotesCreateLazyRoute: typeof NotesCreateLazyRoute;
  NotesIndexLazyRoute: typeof NotesIndexLazyRoute;
  NotesIdEditLazyRoute: typeof NotesIdEditLazyRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AuthLoginLazyRoute: AuthLoginLazyRoute,
  AuthRegisterLazyRoute: AuthRegisterLazyRoute,
  NotesIdLazyRoute: NotesIdLazyRoute,
  NotesCreateLazyRoute: NotesCreateLazyRoute,
  NotesIndexLazyRoute: NotesIndexLazyRoute,
  NotesIdEditLazyRoute: NotesIdEditLazyRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/auth/login",
        "/auth/register",
        "/notes/$id",
        "/notes/create",
        "/notes/",
        "/notes//$id/edit"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/auth/login": {
      "filePath": "auth/login.lazy.tsx"
    },
    "/auth/register": {
      "filePath": "auth/register.lazy.tsx"
    },
    "/notes/$id": {
      "filePath": "notes/$id.lazy.tsx"
    },
    "/notes/create": {
      "filePath": "notes/create.lazy.tsx"
    },
    "/notes/": {
      "filePath": "notes/index.lazy.tsx"
    },
    "/notes//$id/edit": {
      "filePath": "notes/_.$id.edit.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
